diff --git a/GameState.cpp b/GameState.h
similarity index 100%
rename from GameState.cpp
rename to GameState.h
index 5a5cded..c98dbcb 100644
--- a/GameState.cpp
+++ b/GameState.h
@@ -1,86 +1,45 @@
-# include <Siv3D.hpp>
-# include <memory>
-# include "Bird.h"
-# include "ClayPipe.h"
-
-// Instantiation
-
-class GameState
-{
-public:
-	virtual void exec() = 0;
-	virtual ~GameState() = default;
-};
-
-class BeforePlaying : public GameState
-{
-public:
-	void exec() override
-	{
-		// The title screen shown before playing the game.
-
-		// temporary code
-		Print << U"Title Screen";
-	}
-};
-
-class Playing : public GameState
-{
-private:
-	std::shared_ptr<Bird> bird;
-	std::shared_ptr<ClayPipe> clayPipe;
-
-public:
-	Playing(const std::shared_ptr<Bird>& bird, const std::shared_ptr<ClayPipe>& clayPipe) : bird(bird), clayPipe(clayPipe) {};
-
-	void exec() override
-	{
-		// Rendering of the claypipe
-		clayPipe->update();
-		clayPipe->draw();
-		// Rendering of the bird
-		bird->update();
-		bird->draw();
-
-		// temporary code
-		Print << U"Playing";
-	}
-};
-
-class GameOver : public GameState
-{
-public:
-	void exec() override
-	{
-		// The title screen shown before playing the game.
-
-		// temporary code
-		Print << U"GameOver";
-	}
-};
-
-class GameContext
-{
-private:
-	std::shared_ptr<GameState> currentState;
-
-	void setState(std::shared_ptr<GameState> state)
-	{
-		currentState = state;
-	}
-
-public:
-	std::shared_ptr<Bird> bird;
-	std::shared_ptr<ClayPipe> clayPipe;
-
-	// Initial state is BeforePlaying
-	GameContext() : currentState(std::make_shared<BeforePlaying>()) {}
-
-	// Functions to switch game state
-	void startGame()
-	{
-		bird = std::make_shared<Bird>(Scene::CenterF().x, Scene::CenterF().y, 20.0);
-		clayPipe = std::make_shared<ClayPipe>(Rect(800, 0, 70, 300), Palette::Green);
-		setState(std::make_shared<Playing>(bird, clayPipe));
-	}
-	void gameOver()
-	{
-		setState(std::make_shared<GameOver>());
-		bird.reset();
-		clayPipe.reset();
-	}
-	void BackToTitle()
-	{
-		setState(std::make_shared<BeforePlaying>());
-		bird.reset();
-		clayPipe.reset();
-	}
-
-	// The code in exec() is executed in the main loop
-	void exec()
-	{
-		currentState->exec();
-	}
-};
+#pragma once
+#include <Siv3D.hpp>
+#include <memory>
+#include "Bird.h"
+#include "ClayPipe.h"
+
+class GameState {
+public:
+    virtual void exec() = 0;
+    virtual ~GameState() = default;
+};
+
+class BeforePlaying : public GameState {
+public:
+    void exec() override;
+};
+
+class Playing : public GameState {
+private:
+    std::shared_ptr<Bird> bird;
+    std::shared_ptr<ClayPipe> clayPipe;
+public:
+    Playing(const std::shared_ptr<Bird>& bird, const std::shared_ptr<ClayPipe>& clayPipe);
+    void exec() override;
+};
+
+class GameOver : public GameState {
+public:
+    void exec() override;
+};
+
+class GameContext {
+private:
+    std::shared_ptr<GameState> currentState;
+    void setState(std::shared_ptr<GameState> state);
+public:
+    std::shared_ptr<Bird> bird;
+    std::shared_ptr<ClayPipe> clayPipe;
+    GameContext();
+    void startGame();
+    void gameOver();
+    void BackToTitle();
+    void exec();
+};
diff --git a/GameState.cpp b/GameState.cpp
new file mode 100644
index 0000000..17adfe9
--- /dev/null
+++ b/GameState.cpp
@@ -0,0 +1,72 @@
+#include "GameState.h"
+#include <Siv3D.hpp>
+
+void BeforePlaying::exec()
+{
+    // The title screen shown before playing the game.
+    Print << U"Title Screen";
+}
+
+Playing::Playing(const std::shared_ptr<Bird>& bird, const std::shared_ptr<ClayPipe>& clayPipe)
+    : bird(bird), clayPipe(clayPipe)
+{
+}
+
+void Playing::exec()
+{
+    // Rendering of the claypipe
+    clayPipe->update();
+    clayPipe->draw();
+    // Rendering of the bird
+    bird->update();
+    bird->draw();
+
+    // temporary code
+    Print << U"Playing";
+}
+
+void GameOver::exec()
+{
+    // The title screen shown before playing the game.
+    Print << U"GameOver";
+}
+
+GameContext::GameContext()
+    : currentState(std::make_shared<BeforePlaying>())
+{
+}
+
+void GameContext::setState(std::shared_ptr<GameState> state)
+{
+    currentState = state;
+}
+
+void GameContext::startGame()
+{
+    bird = std::make_shared<Bird>(Scene::CenterF().x, Scene::CenterF().y, 20.0);
+    clayPipe = std::make_shared<ClayPipe>(Rect(800, 0, 70, 300), Palette::Green);
+    setState(std::make_shared<Playing>(bird, clayPipe));
+}
+
+void GameContext::gameOver()
+{
+    setState(std::make_shared<GameOver>());
+    bird.reset();
+    clayPipe.reset();
+}
+
+void GameContext::BackToTitle()
+{
+    setState(std::make_shared<BeforePlaying>());
+    bird.reset();
+    clayPipe.reset();
+}
+
+void GameContext::exec()
+{
+    currentState->exec();
+}
